import sys
import os
import json
from datetime import datetime
from typing import Optional

import rutt_to_qb

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QFileDialog, QMessageBox,
    QTreeWidget, QTreeWidgetItem, QHeaderView, QCheckBox,
    QToolButton
)
from PyQt6.QtGui import QGuiApplication, QFont, QCloseEvent
from PyQt6.QtCore import Qt, pyqtSlot


def load_stylesheet(filename: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"Warning: Stylesheet file not found: {filename}")
        return ""


class TorrentApp(QMainWindow):
    USER_CONFIG_FILE = 'user-config.json'
    LOG_TRUNCATE_LENGTH = 100
    DEFAULT_USER_CONFIG = {
        'theme': 'light',
        'logs_expanded': True,
        'window_geometry': {'x': 100, 'y': 100, 'width': 800, 'height': 700}
    }

    def __init__(self):
        super().__init__()
        self.selected_path = ""
        self.config = self._load_user_config()
        self.init_ui()
        self.apply_theme()
        self.load_and_display_torrents()
        self.log_message("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")

    # --- UI Construction ---

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ —Å–µ–∫—Ü–∏–π."""
        self._setup_main_window()
        main_layout = QVBoxLayout()
        main_layout.addLayout(self._create_add_torrent_section())
        main_layout.addWidget(self._create_separator())
        main_layout.addLayout(self._create_torrent_list_section())
        main_layout.addLayout(self._create_log_section())
        main_layout.addLayout(self._create_status_bar())
        main_layout.setStretchFactor(main_layout.itemAt(2).layout(), 1)

        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

    def _setup_main_window(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        self.setWindowTitle("Torrent Manager")
        geometry = self.config.get('window_geometry')
        self.setGeometry(geometry['x'], geometry['y'], geometry['width'], geometry['height'])

    def _create_add_torrent_section(self) -> QVBoxLayout:
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é —Å–µ–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤."""
        layout = QVBoxLayout()
        layout.addWidget(QLabel("<b>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>"))
        url_layout = QHBoxLayout()
        self.url_entry = self._create_line_edit(placeholder="https://rutracker.org/forum/viewtopic.php?t=...")
        url_layout.addWidget(QLabel("–°—Å—ã–ª–∫–∞:"))
        url_layout.addWidget(self.url_entry)
        url_layout.addWidget(self._create_button("üìã", "–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", self.paste_from_clipboard, 40))
        layout.addLayout(url_layout)

        path_layout = QHBoxLayout()
        self.path_label = self._create_line_edit("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", read_only=True)
        path_layout.addWidget(QLabel("–ü–∞–ø–∫–∞:"))
        path_layout.addWidget(self.path_label)
        path_layout.addWidget(self._create_button("...", "–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", self.pick_folder, 40))
        layout.addLayout(path_layout)
        layout.addWidget(self._create_button("–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", on_click=self.add_action))
        return layout

    def _create_torrent_list_section(self) -> QVBoxLayout:
        """–°–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        layout = QVBoxLayout()
        layout.addWidget(QLabel("<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã:</b>"))
        self.torrent_list_widget = QTreeWidget()
        self.torrent_list_widget.setColumnCount(3)
        self.torrent_list_widget.setHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "ID", "–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"])
        self.torrent_list_widget.header().setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        self.torrent_list_widget.itemSelectionChanged.connect(self.on_torrent_selection_change)
        layout.addWidget(self.torrent_list_widget)

        btn_layout = QHBoxLayout()
        btn_layout.addWidget(self._create_button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", on_click=self.load_and_display_torrents))
        btn_layout.addWidget(self._create_button("–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã", on_click=self.update_action))
        self.delete_btn = self._create_button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", on_click=self.delete_selected_torrent, enabled=False)
        btn_layout.addWidget(self.delete_btn)
        layout.addLayout(btn_layout)
        return layout

    def _create_log_section(self) -> QVBoxLayout:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–æ–≤."""
        layout = QVBoxLayout()
        header_layout = QHBoxLayout()
        header_layout.setContentsMargins(0, 5, 0, 5)
        is_expanded = self.config.get('logs_expanded', True)
        self.log_toggle_btn = QToolButton(checkable=True, checked=is_expanded)
        self.log_toggle_btn.setStyleSheet("QToolButton { border: none; }")
        self.log_toggle_btn.clicked.connect(self.toggle_log_visibility)
        header_layout.addWidget(self.log_toggle_btn)
        header_layout.addWidget(QLabel("<b>–õ–æ–≥–∏</b>"))
        header_layout.addStretch()
        layout.addLayout(header_layout)

        self.log_widget = QTreeWidget(visible=is_expanded)
        self.log_widget.setColumnCount(2)
        self.log_widget.setHeaderLabels(["–í—Ä–µ–º—è", "–°–æ–æ–±—â–µ–Ω–∏–µ"])
        self.log_widget.header().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        layout.addWidget(self.log_widget)
        self.update_log_toggle_button()
        return layout

    def _create_status_bar(self) -> QHBoxLayout:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã."""
        layout = QHBoxLayout()
        self.theme_btn = self._create_button("", on_click=self.toggle_theme)
        layout.addStretch()
        layout.addWidget(self.theme_btn)
        return layout

    def _create_separator(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å."""
        separator = QWidget(objectName="separatorLine")
        separator.setFixedHeight(1)
        return separator

    # --- UI Helpers ---

    def _create_button(self, text: str, tooltip: str = None, on_click: callable = None,
                       fixed_width: int = None, enabled: bool = True) -> QPushButton:
        btn = QPushButton(text)
        if tooltip: btn.setToolTip(tooltip)
        if on_click: btn.clicked.connect(on_click)
        if fixed_width: btn.setFixedWidth(fixed_width)
        btn.setEnabled(enabled)
        return btn

    def _create_line_edit(self, text: str = "", placeholder: str = None, read_only: bool = False) -> QLineEdit:
        le = QLineEdit(text)
        if placeholder: le.setPlaceholderText(placeholder)
        le.setReadOnly(read_only)
        return le

    # --- Configuration and Theming ---

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É, –∑–∞–≥—Ä—É–∂–∞—è –µ–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        is_dark = self.config.get('theme') == 'dark'
        stylesheet_path = 'styles/dark.qss' if is_dark else 'styles/light.qss'
        separator_color = "#555" if is_dark else "#cccccc"
        theme_text = "üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" if is_dark else "üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞"
        theme_tooltip = "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É" if is_dark else "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç—ë–º–Ω—É—é —Ç–µ–º—É"

        stylesheet = load_stylesheet(stylesheet_path)
        stylesheet += f"\nQWidget#separatorLine {{ background-color: {separator_color}; }}"
        self.setStyleSheet(stylesheet)
        self.theme_btn.setText(theme_text)
        self.theme_btn.setToolTip(theme_tooltip)

    @pyqtSlot()
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä."""
        self.config['theme'] = 'light' if self.config.get('theme') == 'dark' else 'dark'
        self._save_user_config()
        self.apply_theme()

    def _load_user_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥."""
        if not os.path.exists(self.USER_CONFIG_FILE):
            self._save_user_config(self.DEFAULT_USER_CONFIG)
            return self.DEFAULT_USER_CONFIG.copy()
        try:
            with open(self.USER_CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–ª—é—á–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            for key, value in self.DEFAULT_USER_CONFIG.items():
                config.setdefault(key, value)
            return config
        except (json.JSONDecodeError, TypeError):
            self._save_user_config(self.DEFAULT_USER_CONFIG)
            return self.DEFAULT_USER_CONFIG.copy()

    def _save_user_config(self, config_data: Optional[dict] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥."""
        data_to_save = config_data if config_data is not None else self.config
        with open(self.USER_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, indent=4)

    # --- Event Handlers and Slots ---

    def closeEvent(self, event: QCloseEvent):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        geometry = self.geometry()
        self.config['window_geometry'] = {
            'x': geometry.x(), 'y': geometry.y(),
            'width': geometry.width(), 'height': geometry.height()
        }
        self._save_user_config()
        super().closeEvent(event)

    @pyqtSlot()
    def on_torrent_selection_change(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ."""
        self.delete_btn.setEnabled(bool(self.torrent_list_widget.selectedItems()))

    @pyqtSlot()
    def toggle_log_visibility(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç/–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –ª–æ–≥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        is_visible = self.log_toggle_btn.isChecked()
        self.log_widget.setVisible(is_visible)
        self.update_log_toggle_button()
        self.config['logs_expanded'] = is_visible
        self._save_user_config()

    def update_log_toggle_button(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤."""
        arrow = Qt.ArrowType.DownArrow if self.log_toggle_btn.isChecked() else Qt.ArrowType.RightArrow
        tooltip = "–°–≤–µ—Ä–Ω—É—Ç—å –ª–æ–≥–∏" if self.log_toggle_btn.isChecked() else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ª–æ–≥–∏"
        self.log_toggle_btn.setArrowType(arrow)
        self.log_toggle_btn.setToolTip(tooltip)

    @pyqtSlot()
    def paste_from_clipboard(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ –ø–æ–ª–µ URL."""
        self.url_entry.setText(QGuiApplication.clipboard().text())

    @pyqtSlot()
    def pick_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏."""
        folder_path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder_path:
            self.selected_path = folder_path
            self.path_label.setText(folder_path)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")

    # --- Core Logic Methods ---

    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∂–µ—Ç –ª–æ–≥–æ–≤, —Å–≤–æ—Ä–∞—á–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        if len(message) > self.LOG_TRUNCATE_LENGTH:
            short_message = message[:self.LOG_TRUNCATE_LENGTH] + "... (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å)"
            parent_item = QTreeWidgetItem(self.log_widget, [timestamp, short_message])
            child_item = QTreeWidgetItem(parent_item, ["", message])
            child_item.setFont(1, QFont("Courier New", 9))
        else:
            QTreeWidgetItem(self.log_widget, [timestamp, message])
        self.log_widget.scrollToBottom()

    @pyqtSlot()
    def load_and_display_torrents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—Ä—Ä–µ–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–∫–µ."""
        self.log_message("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤...")
        self.torrent_list_widget.clear()
        try:
            config = rutt_to_qb.load_config(self.log_message)
            for torrent_id, data in config.get('torrents', {}).items():
                path = data.get('save_path', 'N/A')
                name = os.path.basename(os.path.normpath(path))
                item = QTreeWidgetItem([name, torrent_id, path])
                item.setData(1, Qt.ItemDataRole.UserRole, torrent_id)
                self.torrent_list_widget.addTopLevelItem(item)
            self.log_message(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.torrent_list_widget.topLevelItemCount()} —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤.")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤: {e}")

    @pyqtSlot()
    def add_action(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'."""
        url = self.url_entry.text()
        if not url or not self.selected_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        try:
            rutt_to_qb.add_torrent_from_url(url, self.selected_path, self.log_message)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–¢–æ—Ä—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")
            self.url_entry.clear()
            self.load_and_display_torrents()
        except Exception as e:
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @pyqtSlot()
    def delete_selected_torrent(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞."""
        selected_item = self.torrent_list_widget.currentItem()
        if not selected_item: return

        torrent_id = selected_item.data(1, Qt.ItemDataRole.UserRole)
        torrent_name = selected_item.text(0)

        confirmed, delete_files = self._show_delete_confirmation_dialog(torrent_name, torrent_id)
        if not confirmed:
            return

        self.log_message(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ ID: {torrent_id}. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: {delete_files}")
        try:
            if rutt_to_qb.delete_torrent(torrent_id, delete_files, self.log_message):
                self.log_message(f"–¢–æ—Ä—Ä–µ–Ω—Ç ID: {torrent_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                self.load_and_display_torrents()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç ID: {torrent_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        except Exception as e:
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ ID {torrent_id}: {e}")
            QMessageBox.critical(self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    def _show_delete_confirmation_dialog(self, name: str, torrent_id: str) -> tuple[bool, bool]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (confirmed, delete_files)."""
        msg_box = QMessageBox(self)
        msg_box.setIcon(QMessageBox.Icon.Question)
        msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
        msg_box.setText(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç '{name}' (ID: {torrent_id})?")
        msg_box.setInformativeText("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç —Ç–æ—Ä—Ä–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∏–∑ qBittorrent –∫–ª–∏–µ–Ω—Ç–∞.")
        msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        msg_box.setDefaultButton(QMessageBox.StandardButton.No)
        cb = QCheckBox("–£–¥–∞–ª–∏—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞")
        msg_box.setCheckBox(cb)

        if msg_box.exec() == QMessageBox.StandardButton.Yes:
            return True, cb.isChecked()
        return False, False

    @pyqtSlot()
    def update_action(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
        self.log_message("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤...")
        try:
            rutt_to_qb.update_torrents(self.log_message)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        except Exception as e:
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    QApplication.setApplicationName("Torrent Manager")
    window = TorrentApp()
    window.show()
    sys.exit(app.exec())